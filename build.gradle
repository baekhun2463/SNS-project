plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id "com.github.node-gradle.node" version "3.3.0"
}

group = 'SNS-project'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'

    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.3'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.3'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.3'


    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

//-plain.jar 파일은 'jar' 파일과는 다르게
// dependencies를 제외한 class, resources만을 포함하고 있어
// java -jar 옵션으로 Jar파일을 실행 시킬 수 없다.
jar {
    enabled = false
}

node {
    nodeModulesDir = file("$projectDir/front-end")
    version = '18.3.0'
    download = true
}

task npmBuild(type: NpmTask) {
    args = ['run', "build"]
}

task copyFrontEnd(type: Copy) {
    from "$projectDir/front-end/static"
    into 'build/resources/main/static/.'
}

task cleanFrontEnd(type: Delete) {
    delete "$projectDir/front-end/static", "$projectDir/front-end/node_modules"
}

//npmBuild.dependsOn npmInstall
//copyFrontEnd.dependsOn npmBuild
//compileJava.dependsOn copyFrontEnd
//
//clean.dependsOn cleanFrontEnd